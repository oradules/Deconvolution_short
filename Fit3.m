%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% Code written by Ovidiu Radulescu, University of Montpellier, 2019
%%%%% last change March 2021
%%%%% performs 3 exp fit 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


clear all
close all

global FreqEchSimu FreqEchImg DureeAnalysee  TaillePreMarq ...
            TailleSeqMarq TaillePostMarq  Polym_speed frame_num num_possible_poly EspaceInterPolyMin ...
            DureeSimu Intensity_for_1_Polym;

%%%%%%%%%%%%%%%%%%%%%%%%%%% -------Parameters DROSO
Polym_speed = 45; % average speed bases per second (Ref publi)
EspaceInterPolyMin = 30; % in bp 
TaillePreMarq = 41; % 700 bases (ref publi)
TailleSeqMarq = 1292; % 2900 bases (ref publi)
TaillePostMarq = 4526 + Polym_speed*0; % 1600 bases + 50s polya signal
EspaceInterPolyMin = 30; % en base (40 bases)
FrameLen = 3.86; %%% frame length in seconds
FreqEchImg = (1/FrameLen); % 1/3.9 image per second data time sampling   
Intensity_for_1_Polym = 1; 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
FreqEchSimu = 1/(EspaceInterPolyMin/Polym_speed); % how many interval(possible poly start position) in 1s
DureeSignal = (TaillePreMarq + TailleSeqMarq + TaillePostMarq) / Polym_speed; % (s)

fsz=16;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% load the .mat files generated by Deconvol%%%%%%%%%%%%%%%%%%%%%%%%
%%% where to look for the mat files%%%%%%%%%%%%%%%%%%%%%%%
MatFilePath = '../matresultfiles/';  
data_list=struct2cell(dir(fullfile(MatFilePath)));
file_name_list = data_list(1,3:end);
nexp=length(file_name_list);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
pooled =1; %%%% if this is 1, pool all the result files from MatFilePath
%%%%%%%%%%%%%%% if not, use each file separately%%%%%%%%%%%%%%%%%%%%%%%%

%%%%% where to write the output files
DataFilePath0 = '../Results3';
mkdir(DataFilePath0);
xlsfilename = [DataFilePath0,'/results_O3.xlsx'];
xlswrite(xlsfilename,{'Data','M1:k1p','M1:k1m','M1:k2p','M1:k2m','M1:k3','M1:p1','M1:p2','M1:p3','M2:k1p','M2:k1m','M2:k2p','M2:k2m','M2:k3','M2:p1','M2:p2','M2:p3',...
    'lambda1','lambda2','lambda3','A1','A2','A3','S1','Obj','Nuclei','Frames'},1,'A1')

res=[];

if ~pooled
   nfiles = nexp; 
else
   nfiles = 1;
end

for ifile = 1:nfiles
    
    close all

    
 
if pooled
%%%%% lump files, Procustes method 
dataExp=[];
dataPred=[];
posPred=[];
tmax=[];
%%%% first compute max dimension
nmax=1;nmaxpos=1;
for iii=1:nexp
    fname =  file_name_list{iii};
    ffname = [MatFilePath, fname];
    load(ffname);
    n2=size(DataExp);
    n3=size(PosPred);
    if n2(1) > nmax
        nmax=n2(1);
    end
    if n3(1) > nmaxpos
        nmaxpos=n3(1);
    end
end
for iii=1:nexp
    fname =  file_name_list{iii};
    ffname = [MatFilePath, fname];
    load(ffname);
    n2=size(DataExp);
    n3=size(PosPred);    
DataExp=[DataExp;zeros(nmax-n2(1),n2(2))];
DataPred=[DataPred;zeros(nmax-n2(1),n2(2))]; 
PosPred=[PosPred;zeros(nmaxpos-n3(1),n3(2))];
        dataExp=[dataExp,DataExp];
        dataPred=[dataPred,DataPred];
        posPred=[posPred,PosPred];
        tmax=[tmax;n2(1)/FreqEchImg*ones(n2(2),1)]; %%%% movie length, the same for all nuclei in a data sets               
end

DataExp=dataExp;
DataPred=dataPred;
PosPred=posPred;

else
    fname =   file_name_list{ifile};
    %%%% full path file name
    ffname = [MatFilePath, fname];
    load(ffname);
    n2=size(DataExp);
    tmax=n2(1)/FreqEchImg*ones(n2(2),1); %%%% movie length, the same for all nuclei in a data sets               
end
   
    
    

%%%%% extract short name from result file name
iend = strfind(fname,'_00');
name = fname(8:iend-1);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%% where to write figure files %%%%%%%%%%%%%%
dirwrite=[DataFilePath0,'/',name,'_result3'];
mkdir(dirwrite);

n=size(DataExp);
nexp=n(2);
% -------Parameters----------
DureeSimu = n(1)*FrameLen; %%% in s
frame_num = n(1);

DureeAnalysee = DureeSignal + DureeSimu ; % (s)
num_possible_poly = round(DureeAnalysee/(EspaceInterPolyMin/Polym_speed)); 
 

% h=figure(100)
% hold off
% 
% %%%% piecewise-linear fit
% x=(0:frame_num-1)/FreqEchImg/60;
% y=zeros(size(x));
% for i=1:length(x)
%     data=DataExp(i,:);
%     ind=find(data>0);
%     if ~isempty(ind)
%     y(i) = mean(data(ind));
%     end
% end
% 
% %plot((0:frame_num-1)/FreqEchImg/60,mean(transp(DataExp)),'g','linewidth',2)
% plot(x,y,'g','linewidth',2)
% hold on
% 
% P0 = [1 20];
% lb = [-1 -10 -10 -.9 .1];
% ub = [1 10 10 .8 1.8];
% plusfun = @(x) max(x,0);
% model = @(P,x) -P(1)*plusfun(P(2)-x) + P(1)*P(2)  ;
% Pfit = lsqcurvefit(model,P0,x,y),
% ypred=-Pfit(1)*plusfun(Pfit(2)-x) + Pfit(1)*Pfit(2);
% plot(x,ypred,'linewidth',2)
% plot([Pfit(2),Pfit(2)],[0,Pfit(1)*Pfit(2)],'linewidth',2)
% tstart=Pfit(2);   %%%%% tstart in minutes
% 
% title(['Tstart=',num2str(tstart,3)],'Fontsize',12)
% xlabel('Time [min]','Fontsize',12)
% ylabel('Intensity','Fontsize',12)
% 
% figfile=[dirwrite,'/AverageIntensity',name,'.pdf'];
% %print(h,'-dpdf',figfile)




T0=[];MIntensity=[];
for data_i=1:nexp

    
    
    ifig=floor((data_i-1)/36)+1;
%%%%%%%
h=figure(ifig)
hold off

subplot(6,6,mod((data_i-1),36)+1)
max_intensity=max(DataPred(:,data_i));
MIntensity=[MIntensity,max_intensity];
%%%% find first hit
ihit=min(find(DataExp(:,data_i) > max_intensity/5 ));
if isempty(ihit)
    ihit = n(1);
end


%t0o2=max([tstart*60,ihit/FreqEchImg]); %%% t0 in s Option 2
t0o1=ihit/FreqEchImg; %%%% t0 in s Option 1

%if option1
    t0=t0o1;%t02=t0o2;
%else
%    t0=t0o2;t02=t0o1;
%end


T0=[T0,t0];


area([t0/60,tmax(data_i)/60],[150,150],'FaceColor',[0.9,0.9,0.9]); %%% this what is really analyzed
hold on

%plot([t02,t02]/60,[0,150],'k'); %%% the other option
plot((0:frame_num-1)/FreqEchImg/60,transpose(DataExp(:,data_i)),'k','linewidth',0.1)
hold on


plot((0:frame_num-1)/FreqEchImg/60,transpose(DataPred(:,data_i)),'r','linewidth',0.1)


axis([0 40 0 200])
title([num2str(data_i),':',num2str(max_intensity),':',num2str(tmax(data_i)-t0)])


if mod((data_i-1),36)==35 || data_i == nexp
figfile=[dirwrite,'/figure',num2str(ifig),'.pdf'];
print(h,'-dpdf',figfile)
end 


end




colormap jet
h=figure(40)
sz=size(DataPred)
Y=1:sz(2);
X=(0:sz(1)-1)/FreqEchImg/60;
imagesc(X,Y,DataPred')
colorbar
xlabel('Time [min]','Fontsize',12)
ylabel('Transcription site','Fontsize',12)
figfile=[dirwrite,'/DataPred_',name,'.pdf'];
print(h,'-dpdf',figfile)

h=figure(50)
colormap jet
imagesc(X,Y,DataExp')
colorbar
xlabel('Time [min]','Fontsize',12)
ylabel('Transcription site','Fontsize',12)
figfile=[dirwrite,'/DataExp_',name,'.pdf'];
print(h,'-dpdf',figfile)

h=figure(60)
hold off
colormap gray
sz=size(PosPred);
Y=1:sz(2);
X=(0:sz(1)-1)*EspaceInterPolyMin/Polym_speed/60  -(TaillePreMarq+TailleSeqMarq+TaillePostMarq)/Polym_speed/60;  %%%% time
imagesc(X,Y,PosPred')
hold on
xlabel('Time [min]','Fontsize',12)
ylabel('Transcription site','Fontsize',12)


figfile=[dirwrite,'/PosPred',name,'.pdf'];
print(h,'-dpdf',figfile)





 
%%%%% compute distribution of spacings %%%%%%
nn=size(PosPred);

%PosPred(1:100,:)=0;
dt=[]; dtc=[];


figfile=[dirwrite,'/PosPred',name,'.txt']; %%%% text file for pol positions 
fid = fopen(figfile,'w');

for i=1:nn(2) %%% for all cells
 
    times = find (PosPred (:,i) == 1) / FreqEchSimu -(TaillePreMarq+TailleSeqMarq+TaillePostMarq)/Polym_speed ; %%% starting times of polymerases in seconds
 
    fprintf(fid,'%s \n',num2str(times'/60));
    
    if ~isempty(times) && T0(i) < tmax(i)
    dtimes = diff(times);

    
    %%%% find first index larger than T0
    istart=min(find( times > T0(i) - (TaillePreMarq+TailleSeqMarq+TaillePostMarq)/Polym_speed ));

        dt=[dt;dtimes(istart:end)];
         if tmax(i)-times(end) > 0
                dtc=[dtc;tmax(i)-times(end)]; %%%% the very last time
         end 
    end
end

fclose(fid);

%%%% define matrices that store parameters 
store=[];


if ~isempty(dt) %&&  ~isempty(dtc)

for cens=0:1

if cens
[fs,xs,flo,fup]=ecdf([dt;dtc],'censoring',[zeros(size(dt));ones(size(dtc))]);
else
[fs,xs,flo,fup]=ecdf(dt);% no censoring
end
%%%% fit distribution of spacings using combination of two exponentials
xs=xs(1:end-1);
fs=fs(1:end-1);
flo=flo(1:end-1);
fup=fup(1:end-1);
%%%%%%%%%%%%%%%%%%%%%%%%%%

sN = sqrt(length(xs));


exp_fitness = @(k) (log(k(4)*exp(k(1)*xs)+k(5)*exp(k(2)*xs)+(1-k(4)-k(5))*exp(k(3)*xs))-log(1-fs))/sN; % k: parameters


opts = optimoptions(@lsqnonlin,'TolFun', 1e-8,'MaxIter',1e3, ...
        'MaxFunEvals',1e6,'TolX', 1e-10);

k00=[-0.1,-0.01,-0.001,0.25,0.25];    
amp = [log(100),log(100),log(100),log(1),log(1)]; 
NbIterationinFit=100;    
%Omin=1000;
    for mc = 1:NbIterationinFit
        
        %%%% Change k00
        factor=exp(amp.*(2*rand(1,5)-1)); 
        
        k0 = k00.*factor;
        k0(4:5)=2*rand(1,2)-1; 
        
        %%%% sort k0(1:3)
        k0(1:3)=sort(k0(1:3),'ascend');
        
        if ~( sum(k0(4:5)) < 1 && k0(1)*k0(4)+k0(2)*k0(5)+k0(3)*(1-sum(k0(4:5))) < 0 )
            while ~(sum(k0(4:5)) < 1 && k0(1)*k0(4)+k0(2)*k0(5)+k0(3)*(1-sum(k0(4:5))) < 0)
                k0(4:5)=2*rand(1,2)-1;  %%% A1,A2 values
            end
        end    
        
        
        %%%% Use the fcn lsqnonlin
            [k, obj] = lsqnonlin(exp_fitness,k0,[],[],opts);
        %%%% write down results
        
        %%%% sort k
        A=[k(4),k(5),1-k(4)-k(5)]; %%% A values before sorting 
        [kk,IX]=sort(k(1:3),'ascend');
        k(1:3)=kk;
        A=A(IX);
        k(4:5)=A(1:2);
        
        store = [store;[k, obj,cens]];
        
       % disp(mc)
        
%         if obj < Omin & sum(imag(k))==0
%            Omin=obj;
%            kmin=k;
%         end     
    end    
 


end % cens 


%%%% select optimal and suboptimal obj < (1-overflow)*objmin
ind = find  (max(abs(imag(store(:,1:3))),[],2) < 1e-10); % takes the part where we have the imaginary part of lambda i almost 0
[objmin,indmin]=min(store(ind,end-1)); %minimum of the objectives for all the previous lambdas
imin=ind(indmin); % finding the positions of the lambda where we have the lowest objective
overflow=1;
ind=find(store(:,end-1) < (1+overflow)*objmin & max(abs(imag(store(:,1:3))),[],2) < 1e-10 ); % taking suboptimal objectives such that they are <2*optimal objective and they satisfy the fact that the imaginary part of lambda is almost 0
%ind_strict = find(store(:,end) > objmin*(1+overflow/2) & max(abs(imag(store(:,1:3))),[],2) < 1e-10 ); % taking suboptimal objectives such that they are >1.5*optimal objective and they satisfy the fact that the imaginary part of lambda is almost 0
%[obj2min,ind2min]=min(store(ind_strict,end)); % second minimum (?) of the objectives for all the previous lambdas
%i2min=ind_strict(ind2min); %  finding the positions of the lambda where we have the second lowest objective
ksel=real(store(ind,1:5)); % taking an array of lambda i's and Ai's where we have the the objective function less than <2*times the minimum objective function
kmin=real(store(imin,1:5) ); %taking the lambda i's and A i's that are the fittest
%k2min=real(store(i2min,1:5) ); % taking the lambda i's and A i's that satisfies obj < 1.5 obj
censmin=store(imin,end);



if censmin
    [fs,xs,flo,fup]=ecdf([dt;dtc],'censoring',[zeros(size(dt));ones(size(dtc))]);
else
    [fs,xs,flo,fup]=ecdf([dt;dtc]);% no censoring
end




h=figure(70)
hold off
semilogy(xs,1-fs,'or')
hold on
semilogy(xs,1-flo,'--r')
semilogy(xs,1-fup,'--r')
pred=kmin(4)*exp(kmin(1)*xs)+kmin(5)*exp(kmin(2)*xs)+(1-kmin(4)-kmin(5))*exp(kmin(3)*xs);
semilogy(xs,pred,'k','linewidth',2)
axis([0, 250, 1e-6, 1])
xlabel('Time [s]','fontsize',fsz)
ylabel('Survival function','fontsize',fsz)

%%%% compute 5 rates k1p,m k2p,m k3 from the 5 parameters %%%
l1=kmin(1);
l2=kmin(2);
l3=kmin(3);
A1=kmin(4);
A2=kmin(5);
A3=1-A1-A2;
L1=l1+l2+l3;
L2=l1.*l2+l1.*l3+l2.*l3;
L3=l1.*l2.*l3;
S1=A1.*l1+A2.*l2+A3.*l3;
S2=A1.*l1.^2+A2.*l2.^2+A3.*l3.^2;
S3=A1.*l1.^3+A2.*l2.^3+A3.*l3.^3;
%%%%% Model M2
kk3= -S1;
kk1p = 1/2 * ( -L1+S2/S1 + sqrt((S1*L1-S2)^2-4*L3*S1)/S1 );
kk2p = 1/2 * ( -L1+S2/S1 - sqrt((S1*L1-S2)^2-4*L3*S1)/S1 );
kk1m = 1/2 * (S1-S2/S1 - (-S1^2*L1+S1*S2+S1*L2-L3+S2^2/S1-S3)/sqrt((S1*L1-S2)^2-4*L3*S1));
kk2m = 1/2 * (S1-S2/S1 + (-S1^2*L1+S1*S2+S1*L2-L3+S2^2/S1-S3)/sqrt((S1*L1-S2)^2-4*L3*S1));
pp1=kk1m*kk2p/(kk1p*kk2p+kk1m*kk2p+kk1p*kk2m);
pp2=kk1p*kk2m/(kk1p*kk2p+kk1m*kk2p+kk1p*kk2m);
pp3=kk1p*kk2p/(kk1p*kk2p+kk1m*kk2p+kk1p*kk2m);
%%%% model M1
k1p=-L3.*(S1.^2-S2)./(S2.^2-S1.*S3); %%% k1p
k2p=-(S2.^2-S1.*S3)./S1./(S1.^2-S2); %%% k2pk
k3=-S1; %%%% k3
k2m=(S1.^2-S2)./S1; %%% k2m
k1m=-A1.*A2.*A3.*(l1-l2).^2.*(l1-l3).^2.*(l2-l3).^2.*S1./(S1.^2-S2)./(S2.^2-S1.*S3); %%% k1m
p1=k1m*k2m/(k1p*k2m+k1m*k2m+k1p*k2p);
p2=k1p*k2m/(k1p*k2m+k1m*k2m+k1p*k2p);
p3=k1p*k2p/(k1p*k2m+k1m*k2m+k1p*k2p);

title(['k_1^-=',num2str(k1m,1),'k_1^+=',num2str(k1p,1),'k_2^-=',num2str(k2m,1),...
    'k_2^+=',num2str(k2p,1),'k_3=',num2str(k3,1)])

%%%% save empirical, lower, upper, as Matlab variables %%%%%%
% filename=[dirwrite,'/Fit_',name,'.mat'];
% save(filename,'xs','fs','flo','fup','pred','kmin');
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

figfile=[dirwrite,'/Fit_',name,'.pdf'];
%print(h,'-dpdf',figfile)


nn=size(DataExp);
%%%% optimal
res= [k1p,k1m,k2p,k2m,k3,p1,p2,p3,kk1p,kk1m,kk2p,kk2m,kk3,pp1,pp2,pp3,l1,l2,l3,A1,A2,A3,S1,objmin,nn(2),nn(1)]; %%%% optimum



%%%%% compute intervals
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
l1=ksel(:,1);l1sel=l1;
l2=ksel(:,2);l2sel=l2;
l3=ksel(:,3);l3sel=l3;
A1=ksel(:,4);A1sel=A1;
A2=ksel(:,5);A2sel=A2;
A3=1-A1-A2;A3sel=A3;
L1=l1+l2+l3;
L2=l1.*l2+l1.*l3+l2.*l3;
L3=l1.*l2.*l3;
S1=A1.*l1+A2.*l2+A3.*l3;S1sel=S1;
S2=A1.*l1.^2+A2.*l2.^2+A3.*l3.^2;
S3=A1.*l1.^3+A2.*l2.^3+A3.*l3.^3;

%%%% model M2
KK1p = 1/2 * ( -L1+S2./S1 + sqrt((S1.*L1-S2).^2-4*L3.*S1)./S1 );
KK2p = 1/2 * ( -L1+S2./S1 - sqrt((S1.*L1-S2).^2-4*L3.*S1)./S1 ); 
KK1m = 1/2 * (S1-S2./S1 - (-S1.^2.*L1+S1.*S2+S1.*L2-L3+S2.^2./S1-S3)./sqrt((S1.*L1-S2).^2-4*L3.*S1)); 
KK2m = 1/2 * (S1-S2./S1 + (-S1.^2.*L1+S1.*S2+S1.*L2-L3+S2.^2./S1-S3)./sqrt((S1.*L1-S2).^2-4*L3.*S1)); 
KK3=-S1; %%%% k3
PP1=KK1m.*KK2p./(KK1p.*KK2p+KK1m.*KK2p+KK1p.*KK2m);
PP2=KK1p.*KK2m./(KK1p.*KK2p+KK1m.*KK2p+KK1p.*KK2m);
PP3=KK1p.*KK2p./(KK1p.*KK2p+KK1m.*KK2p+KK1p.*KK2m);
%%%% model M1
K1p=-L3.*(S1.^2-S2)./(S2.^2-S1.*S3); %%% k1p
K2p=-(S2.^2-S1.*S3)./S1./(S1.^2-S2); %%% k2p
K3=-S1; %%%% k3
K2m=(S1.^2-S2)./S1; %%% k2m
K1m=-A1.*A2.*A3.*(l1-l2).^2.*(l1-l3).^2.*(l2-l3).^2.*S1./(S1.^2-S2)./(S2.^2-S1.*S3); %%% k1m
P1=K1m.*K2m./(K1p.*K2m+K1m.*K2m+K1p.*K2p);
P2=K1p.*K2m./(K1p.*K2m+K1m.*K2m+K1p.*K2p);
P3=K1p.*K2p./(K1p.*K2m+K1m.*K2m+K1p.*K2p);





% %%%% compute 5 rates k1p,m k2p,m k3 from the 5 parameters %%%
% l1=k2min(1);
% l2=k2min(2);
% l3=k2min(3);
% A1=k2min(4);
% A2=k2min(5);
% A3=1-A1-A2;
% L1=l1+l2+l3;
% L2=l1.*l2+l1.*l3+l2.*l3;
% L3=l1.*l2.*l3;
% S1=A1.*l1+A2.*l2+A3.*l3;
% S2=A1.*l1.^2+A2.*l2.^2+A3.*l3.^2;
% S3=A1.*l1.^3+A2.*l2.^3+A3.*l3.^3;
% %%%%% Model M2
% kk3= -S1;
% kk1p = 1/2 * ( -L1+S2/S1 + sqrt((S1*L1-S2)^2-4*L3*S1)/S1 );
% kk2p = 1/2 * ( -L1+S2/S1 - sqrt((S1*L1-S2)^2-4*L3*S1)/S1 );
% kk1m = 1/2 * (S1-S2/S1 - (-S1^2*L1+S1*S2+S1*L2-L3+S2^2/S1-S3)/sqrt((S1*L1-S2)^2-4*L3*S1));
% kk2m = 1/2 * (S1-S2/S1 + (-S1^2*L1+S1*S2+S1*L2-L3+S2^2/S1-S3)/sqrt((S1*L1-S2)^2-4*L3*S1));
% pp1=kk1m*kk2p/(kk1p*kk2p+kk1m*kk2p+kk1p*kk2m);
% pp2=kk1p*kk2m/(kk1p*kk2p+kk1m*kk2p+kk1p*kk2m);
% pp3=kk1p*kk2p/(kk1p*kk2p+kk1m*kk2p+kk1p*kk2m);
% %%%% model M1
% k1p=-L3.*(S1.^2-S2)./(S2.^2-S1.*S3); %%% k1p
% k2p=-(S2.^2-S1.*S3)./S1./(S1.^2-S2); %%% k2p
% k3=-S1; %%%% k3
% k2m=(S1.^2-S2)./S1; %%% k2m
% k1m=-A1.*A2.*A3.*(l1-l2).^2.*(l1-l3).^2.*(l2-l3).^2.*S1./(S1.^2-S2)./(S2.^2-S1.*S3); %%% k1m
% p1=k1m*k2m/(k1p*k2m+k1m*k2m+k1p*k2p);
% p2=k1p*k2m/(k1p*k2m+k1m*k2m+k1p*k2p);
% p3=k1p*k2p/(k1p*k2m+k1m*k2m+k1p*k2p);
% 
% res2= [k1p,k1m,k2p,k2m,k3,p1,p2,p3,kk1p,kk1m,kk2p,kk2m,kk3,pp1,pp2,pp3,l1,l2,l3,A1,A2,A3,S1,obj2min,nn(2),nn(1)]; %%%% 2nd optimum

resl= [min(K1p),min(K1m),min(K2p),min(K2m),min(K3),min(P1),min(P2),min(P3),min(KK1p),min(KK1m),min(KK2p),min(KK2m),min(KK3),min(PP1),min(PP2),min(PP3),min(l1sel),min(l2sel),min(l3sel),min(A1sel),min(A2sel),min(A3sel),min(S1sel)];

resl(1:16) = max([resl(1:16);zeros(1,16)]); 


resh= [max(K1p),max(K1m),max(K2p),max(K2m),max(K3),max(P1),max(P2),max(P3),max(KK1p),max(KK1m),max(KK2p),max(KK2m),max(KK3),max(PP1),max(PP2),max(PP3),max(l1sel),max(l2sel),max(l3sel),max(A1sel),max(A2sel),max(A3sel),max(S1sel)];




xlswrite(xlsfilename,{strrep(name,'result_','')},1,['A',num2str(4*ifile-2)]); %%% filename
xlswrite(xlsfilename,res,1,['B',num2str(4*ifile-2)]); %%% best result
%xlswrite(xlsfilename,res2,1,['B',num2str(4*ifile-1)]); %%% 2nd best result
xlswrite(xlsfilename,resl,1,['B',num2str(4*ifile-1)]); %%% low 
xlswrite(xlsfilename,resh,1,['B',num2str(4*ifile)]); %%% high 

else

xlswrite(xlsfilename,{strrep(name,'result_','')},1,['A',num2str(4*ifile-2)]); %%% filename
nn=size(DataExp);
%%%% 
res= [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,nn(2),nn(1)];
xlswrite(xlsfilename,res,1,['B',num2str(4*ifile-2)]); %%% best result
      
end

end % ifile


