%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% Code written by Ovidiu Radulescu, University of Montpellier, 2019
%%%%% Copyright : This is published under 3-clause BSD
%%%%% last change March 2021
%%%%% performs 2 exp fit
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
clear all
close all

global FreqEchSimu FreqEchImg DureeAnalysee TaillePreMarq ...
            TailleSeqMarq TaillePostMarq  Polym_speed frame_num num_possible_poly EspaceInterPolyMin ...
            DureeSimu Intensity_for_1_Polym;

%%%%%%%%%%%%%%%%%%%%%%%%%%% -------Parameters DROSO
Polym_speed = 45; % average speed bases per second (Ref publi)
EspaceInterPolyMin = 30; % in bp 
TaillePreMarq = 41; % 700 bases (ref publi)
TailleSeqMarq = 1292; % 2900 bases (ref publi)
TaillePostMarq = 4526 + Polym_speed*0; % 1600 bases + 50s polya signal
EspaceInterPolyMin = 30; % en base (40 bases)
FrameLen = 3.86; %%% frame length in seconds
FreqEchImg = (1/FrameLen); % 1/3.9 image per second data time sampling   
Intensity_for_1_Polym = 1; 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
FreqEchSimu = 1/(EspaceInterPolyMin/Polym_speed); % how many interval(possible poly start position) in 1s
DureeSignal = (TaillePreMarq + TailleSeqMarq + TaillePostMarq) / Polym_speed; % (s)

fsz=16;lw=2;msz=10;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% load the .mat files generated by Deconvol%%%%%%%%%%%%%%%%%%%%%%%%
%%% where to look for the mat files%%%%%%%%%%%%%%%%%%%%%%%
MatFilePath = '../matresultfiles/';  
data_list=struct2cell(dir(fullfile(MatFilePath)));
file_name_list = data_list(1,3:end);
nexp=length(file_name_list);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
pooled =1; %%%% if this is 1, pool all the result files from MatFilePath
%%%%%%%%%%%%%%% if not, use each file separately%%%%%%%%%%%%%%%%%%%%%%%%

        
%option1=1;   %%%% if this is 1, start analysis at 1/5th of the max intensity, if 0 start
%%%%%%%%%%%%%%%%% at the max of the two time points (1/5th of max and the switch point in the 
%%%%%%%%%%%%%%%%% piecewise linear approximation) 


%%%%% where to write the output files
DataFilePath0 = '../Results2';
mkdir(DataFilePath0);
xlsfilename = [DataFilePath0,'/results.xlsx'];
xlswrite(xlsfilename,{'Data','k1p','k1m','k2','p1','p2','Obj','Nuclei','Frames'},1,'A1')

res=[];
par_noise=[];

if ~pooled
   nfiles = nexp; 
else
   nfiles = 1;
end

for ifile =1:nfiles  %%%% several datasets or one pooled dataset
    
    close all


 

if pooled
%%%%% lump files, Procustes method 
dataExp=[];
dataPred=[];
posPred=[];
tmax=[];
%%%% first compute max dimension
nmax=1;nmaxpos=1;
for iii=1:nexp
    fname =  file_name_list{iii};
    ffname = [MatFilePath, fname];
    load(ffname);
    n2=size(DataExp);
    n3=size(PosPred);
    if n2(1) > nmax
        nmax=n2(1);
    end
    if n3(1) > nmaxpos
        nmaxpos=n3(1);
    end
end
for iii=1:nexp
    fname =  file_name_list{iii};
    ffname = [MatFilePath, fname];
    load(ffname);
    n2=size(DataExp);
    n3=size(PosPred);    
DataExp=[DataExp;zeros(nmax-n2(1),n2(2))];
DataPred=[DataPred;zeros(nmax-n2(1),n2(2))]; 
PosPred=[PosPred;zeros(nmaxpos-n3(1),n3(2))];
        dataExp=[dataExp,DataExp];
        dataPred=[dataPred,DataPred];
        posPred=[posPred,PosPred];
        tmax=[tmax;n2(1)/FreqEchImg*ones(n2(2),1)]; %%%% movie length, the same for all nuclei in a data sets               
end

DataExp=dataExp;
DataPred=dataPred;
PosPred=posPred;

else
    fname =   file_name_list{ifile};
    %%%% full path file name
    ffname = [MatFilePath, fname];
    load(ffname);
    n2=size(DataExp);
    tmax=n2(1)/FreqEchImg*ones(n2(2),1); %%%% movie length, the same for all nuclei in a data sets               
end



%%%%% extract short name from result file name
iend = strfind(fname,'_00');
name = fname(8:iend-1);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%% where to write figure files %%%%%%%%%%%%%%
dirwrite=[DataFilePath0,'/',name,'_result'];
mkdir(dirwrite);

n=size(DataExp);
nexp=n(2);
% -------Parameters----------
DureeSimu = n(1)*FrameLen; %%% in s
frame_num = n(1);

DureeAnalysee = DureeSignal + DureeSimu ; % (s)
num_possible_poly = round(DureeAnalysee/(EspaceInterPolyMin/Polym_speed)); 
 

%h=figure(100)
%hold off
%%%% piecewise-linear fit %%should remove this until line 159 since we are
%%%% not going to use this option
%x=(0:frame_num-1)/FreqEchImg/60;
%y=zeros(size(x));
%for i=1:length(x)
%    data=DataExp(i,:);
%    ind=find(data>0);
%    if ~isempty(ind)
%    y(i) = mean(data(ind));
%    end
%end
%plot(x,y,'g','linewidth',2)
%hold on
%P0 = [1 20];
%lb = [-1 -10 -10 -.9 .1]; %not used
%ub = [1 10 10 .8 1.8]; % not used
%plusfun = @(x) max(x,0);
%model = @(P,x) -P(1)*plusfun(P(2)-x) + P(1)*P(2)  ;
%Pfit = lsqcurvefit(model,P0,x,y)
%ypred=-Pfit(1)*plusfun(Pfit(2)-x) + Pfit(1)*Pfit(2);
%plot(x,ypred,'linewidth',2)
%plot([Pfit(2),Pfit(2)],[0,Pfit(1)*Pfit(2)],'linewidth',2)
%tstart=Pfit(2);   %%%%% tstart in minutes

%title(['Tstart=',num2str(tstart,3)],'Fontsize',12)
%xlabel('Time [min]','Fontsize',12)
%ylabel('Intensity','Fontsize',12)

%figfile=[dirwrite,'/AverageIntensity',name,'.pdf'];
%print(h,'-dpdf',figfile)




T0=[];MIntensity=[];
for data_i=1:nexp  %%%% for all nuclei

    
    
    ifig=floor((data_i-1)/36)+1;
%%%%%%%
h=figure(ifig)
hold off

subplot(6,6,mod((data_i-1),36)+1)
max_intensity=max(DataExp(:,data_i));
MIntensity=[MIntensity,max_intensity];
%%%% find first hit
ihit=min(find(DataExp(:,data_i) > max_intensity/5 ));
if isempty(ihit)
    ihit = n(1);
end


%t0o2=max([tstart*60,ihit/FreqEchImg]); %%% t0 in s Option 2 : the largest of the two times
t0o1=ihit/FreqEchImg; %%%% t0 in s Option 1 : 1/5th of the max intensity

%if option1
    t0=t0o1; %%%%% 1/5th of max intensity
    %t02=t0o2; 
%else
%    t0=t0o2;t02=t0o1;  %%%%% the max of the two 
%end


T0=[T0,t0]; %%%% start of analysed region


area([t0/60,tmax(data_i)/60],[150,150],'FaceColor',[0.9,0.9,0.9]); %%% this what is really analyzed
hold on

%plot([t02,t02]/60,[0,150],'k'); %%% the other option %the same as before so not using it
plot((0:frame_num-1)/FreqEchImg/60,transpose(DataExp(:,data_i)),'k','linewidth',0.1)
hold on


plot((0:frame_num-1)/FreqEchImg/60,transpose(DataPred(:,data_i)),'r','linewidth',0.1)

axis([0 40 0 200])
title([num2str(data_i),':',num2str(max_intensity),':',num2str(tmax(data_i)-t0)])

if mod((data_i-1),36)==35 || data_i == nexp
figfile=[dirwrite,'/figure',num2str(ifig),'.pdf'];
print(h,'-dpdf',figfile)
end 


end




colormap jet
h=figure(40)
sz=size(DataPred)
Y=1:sz(2);
X=(0:sz(1)-1)/FreqEchImg/60;
imagesc(X,Y,DataPred')
colorbar
xlabel('Time [min]','Fontsize',12)
ylabel('Transcription site','Fontsize',12)
figfile=[dirwrite,'/DataPred_',name,'.pdf'];
print(h,'-dpdf',figfile)

h=figure(50)
colormap jet
imagesc(X,Y,DataExp')
colorbar
xlabel('Time [min]','Fontsize',12)
ylabel('Transcription site','Fontsize',12)
figfile=[dirwrite,'/DataExp_',name,'.pdf'];
print(h,'-dpdf',figfile)

h=figure(60)
hold off
colormap gray
sz=size(PosPred);
Y=1:sz(2);
X=(0:sz(1)-1)*EspaceInterPolyMin/Polym_speed/60  -(TaillePreMarq+TailleSeqMarq+TaillePostMarq)/Polym_speed/60;  %%%% time
imagesc(X,Y,PosPred')
hold on
xlabel('Time [min]','Fontsize',12)
ylabel('Transcription site','Fontsize',12)


figfile=[dirwrite,'/PosPred',name,'.pdf'];
print(h,'-dpdf',figfile)




%%%%% compute distribution of spacings %%%%%%
nn=size(PosPred);

%PosPred(1:100,:)=0; %adding this since transcription doesnt start immediately 
dt=[]; dtc=[];


figfile=[dirwrite,'/PosPred',name,'.txt']; %%%% text file for pol positions 
fid = fopen(figfile,'w');

for i=1:nn(2) %%% for all nuclei
 
    times = find (PosPred (:,i) == 1) / FreqEchSimu -(TaillePreMarq+TailleSeqMarq+TaillePostMarq)/Polym_speed ; %%% starting times of polymerases in seconds
 
    
%figure
%hold off
%plot(times,times,'x')
%hold on
%t0=T0(i) - (TaillePreMarq+TailleSeqMarq+TaillePostMarq)/Polym_speed;
%Tmax=tmax(i); 
%plot([t0,t0],[t0,t0],'or')
%plot([Tmax,Tmax],[Tmax,Tmax],'or')
%title(num2str(i))    
  
    
    fprintf(fid,'%s \n',num2str(times'/60));
    
    if ~isempty(times) % &&  tmax(i) - T0(i) > 100 && MIntensity(i) < 150
    
        dtimes = diff(times);

    %%%% find first index larger than T0
    istart=min(find( times > T0(i) - (TaillePreMarq+TailleSeqMarq+TaillePostMarq)/Polym_speed ));

        dt=[dt;dtimes(istart:end)];
        if tmax(i)-times(end) > 0
             dtc=[dtc;tmax(i)-times(end)]; %%%% the very last time
        end
    end
end

fclose(fid);

%%%% define matrices that store parameters and objective functions
store=[];


if ~isempty(dt) %&&  ~isempty(dtc) %should remove the second condition

for cens=0:1

if cens
    [fs,xs,flo,fup]=ecdf([dt;dtc],'censoring',[zeros(size(dt));ones(size(dtc))]);
else
    [fs,xs,flo,fup]=ecdf(dt);% no censoring
end
%%%% fit distribution of spacings using combination of two exponentials
xs=xs(1:end-1);
fs=fs(1:end-1);
flo=flo(1:end-1);
fup=fup(1:end-1);
%%%%%%%%%%%%%%%%%%%%%%%%%%

sN = sqrt(length(xs));

exp_fitness = @(k) (abs(log(k(3)*exp(k(1)*xs)+(1-k(3))*exp(k(2)*xs))-log(1-fs)))/sN; % k: parameters

opts = optimoptions(@lsqnonlin,'TolFun', 1e-8,'MaxIter',1e3, ...
        'MaxFunEvals',1e6,'TolX', 1e-10);

k00=[-0.01,-0.001,1];    
amp = [log(100),log(100)]; 
NbIterationinFit=100;    
%Omin=1000;
    for mc = 1:NbIterationinFit
        
        %%%% Change k00
        factor=exp(amp.*(2*rand(1,2)-1)); 
        k0 = k00;
        k0(1:2)=k0(1,2).*factor;
        k0(3) =  2*rand(1,1)-1; %%% A1
        %%%% sort k0(1:2)
        k0(1:2)=sort(k0(1:2),'ascend');
        
        %%% impose constraints
        if ~( k0(1)*k0(3)+k0(2)*(1-k0(3)) < 0 )
            while ~( k0(1)*k0(3)+k0(2)*(1-k0(3)) < 0 )
                k0(3)=2*rand(1,1)-1;  %%% A1 
            end
        end
        
        
        
        %%%% Use the fcn lsqnonlin
            [k, obj] = lsqnonlin(exp_fitness,k0,[],[],opts);
        %%%% write down results
        
        %%%% sort k
        A=[k(3),1-k(3)]; %%% A values before sorting 
        [kk,IX]=sort(k(1:2),'ascend'); %%% sort lambdas
        k(1:2)=kk;
        A=A(IX);
        k(3)=A(1);
        
        store = [store;[k, obj, cens]];
        
        disp(mc)
        
%         if obj < Omin & sum(imag(k))==0
%            Omin=obj;
%            kmin=k;
%         end     
    end    
 


end % cens 


%%%% select optimal and suboptimal obj < 2 objmin
ind = find  (max(abs(imag(store(:,1:3))),[],2) < 1e-10);
[objmin,indmin]=min(store(ind,4));
imin=ind(indmin);
overflow=1;
ind=find(store(:,4) < (1+overflow)*objmin & max(abs(imag(store(:,1:3))),[],2) < 1e-10 );
%ind_strict = find(store(:,4) > objmin*1.01 & max(abs(imag(store(:,1:3))),[],2) < 1e-10 );
%[obj2min,ind2min]=min(store(ind_strict,4)); %%% 2nd optimum
%i2min=ind_strict(ind2min);
ksel=real(store(ind,1:3)); %%%% optimal and suboptimal
kmin=real(store(imin,1:3) ); %%%% optimal
%k2min=real(store(i2min,1:3) );
censmin=store(imin,5);





if censmin
    [fs,xs,flo,fup]=ecdf([dt;dtc],'censoring',[zeros(size(dt));ones(size(dtc))]);
else
    [fs,xs,flo,fup]=ecdf([dt;dtc]);% no censoring
end

%%%%% plot survival function 
h=figure(70)
hold off
semilogy(xs,1-fs,'or') %%% empirical function
hold on
semilogy(xs,1-flo,'--r') %%%% lower confidence 
semilogy(xs,1-fup,'--r') %%%% upper confidence
pred=kmin(3)*exp(kmin(1)*xs)+(1-kmin(3))*exp(kmin(2)*xs);
semilogy(xs,pred,'k','linewidth',2) %%% predicted 2 exp
axis([0, 250, 1e-6, 1])
xlabel('Time [s]','fontsize',fsz)
ylabel('Survival function','fontsize',fsz)
%%%% save empirical, lower, upper, as Matlab variables %%%%%%
%filename=[dirwrite,'/Fit_',name,'.mat'];
%save(filename,'xs','fs','flo','fup','pred','kmin');
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%% compute 3 rates k1p,m k2 from the 3 parameters %%%
S1 = kmin(3)*kmin(1)+(1-kmin(3))*kmin(2);
k2 = -S1; 
S2 = kmin(3)*(kmin(1))^2+(1-kmin(3))*(kmin(2))^2;
S3 = kmin(3)*(kmin(1))^3+(1-kmin(3))*(kmin(2))^3;
k1m = S1-S2/S1; 
k1p = (S3*S1-S2^2)/S1/(S1^2-S2); 
title(['k_1^-=',num2str(k1m,1),'k_1^+=',num2str(k1p,1),'k_2=',num2str(k2,1)])




figfile=[dirwrite,'/Fit_',name,'.pdf'];
print(h,'-dpdf',figfile)


%%%%% compute intervals
S1 = ksel(:,3).*ksel(:,1)+(1-ksel(:,3)).*ksel(:,2);
K2 = -S1; 
S2 = ksel(:,3).*(ksel(:,1)).^2+(1-ksel(:,3)).*(ksel(:,2)).^2;
S3 = ksel(:,3).*(ksel(:,1)).^3+(1-ksel(:,3)).*(ksel(:,2)).^3;
K1m = S1-S2./S1; 
K1p = (S3.*S1-S2.^2)./S1./(S1.^2-S2); 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



nn=size(DataExp);
%%%% optimal
res= [k1p,k1m,k2,k1m/(k1m+k1p),k1p/(k1m+k1p),objmin,nn(2),nn(1)];


%%%% compute 3 rates k1p,m k2 from the 3 parameters %%%
%S1 = k2min(3)*k2min(1)+(1-k2min(3))*k2min(2);
%k2 = -S1; 
%S2 = k2min(3)*(k2min(1))^2+(1-k2min(3))*(k2min(2))^2;
%S3 = k2min(3)*(k2min(1))^3+(1-k2min(3))*(k2min(2))^3;
%k1m = S1-S2/S1; 
%k1p = (S3*S1-S2^2)/S1/(S1^2-S2); 

%res2= [k1p,k1m,k2,k1m/(k1m+k1p),k1p/(k1m+k1p),obj2min,nn(2),nn(1)];

P1=K1m./(K1m+K1p);
P2=K1p./(K1m+K1p);

resl= [min(K1p),min(K1m),min(K2),min(P1),min(P2)];

resl = max([resl;zeros(1,5)]); 


resh= [max(K1p),max(K1m),max(K2),max(P1),max(P2)];




xlswrite(xlsfilename,{strrep(name,'result_','')},1,['A',num2str(4*ifile-2)]); %%% filename

xlswrite(xlsfilename,res,1,['B',num2str(4*ifile-2)]); %%% best result
%xlswrite(xlsfilename,res2,1,['B',num2str(4*ifile-1)]); %%% second best result
xlswrite(xlsfilename,resl,1,['B',num2str(4*ifile-1)]); %%% low 
xlswrite(xlsfilename,resh,1,['B',num2str(4*ifile)]); %%% high 


else
    
    
xlswrite(xlsfilename,{strrep(name,'result_','')},1,['A',num2str(4*ifile-2)]); %%% filename
nn=size(DataExp);
%%%% 
res= [0,0,0,0,0,0,nn(2),nn(1)];
xlswrite(xlsfilename,res,1,['B',num2str(4*ifile-2)]); %%% best result
      
end

end % ifile

